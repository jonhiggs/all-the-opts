#!/usr/bin/env bash
source $(dirname $0)/../lib/public.inc

function testDescription() {
  assertEquals "when unset"   ""              "$(pgop_description)"
  assertTrue   "setting"      "pgop_description 'is_set'"
  assertEquals "when set"     "is_set"        "$(pgop_description "is_set"; pgop_description)"
}

function testRead() {
  PGOP_GLOBAL=()
  assertFalse "a non-existant object returns false" \
    "pgop_read global xyz"

  PGOP_GLOBAL=()
  PGOP_GLOBAL+=("z zzz something -")
  assertTrue "an existant object returns true"    \
    "pgop_read global zzz"

  assertEquals "returns exitant object"    \
    "z zzz something -" \
    "$(pgop_read global zzz)"

  PGOP_GLOBAL=()
  PGOP_GLOBAL+=("z zzz something -")
  PGOP_GLOBAL+=("y yyy something_else -")
  assertTrue "multiple objects returns true"       \
    "pgop_read global"

  assertEquals "multiple objects are returned"       \
    2                                                \
    $(pgop_read global | wc -l)

  assertEquals "with multiple objects should be able to return specific"     \
    "z zzz something -" \
    "$(pgop_read global z)"

  assertEquals "with multiple object, return nothing when it doesn't exist"     \
    "" \
    "$(pgop_read global zzzz)"

  assertFalse "with multiple object, return false when it doesn't exist"     \
    "pgop_read global zzzz"
}

function testAdd() {
  assertEquals "without enough options"    \
    "Error: you must provide context, short option, long option, description and optionally an optarg too"  \
    "$(pgop_add global 2>&1)"

  PGOP_GLOBAL=()
  PGOP_GLOBAL+=("z zzz something -")
  assertFalse "adding duplicate short option"    \
    "pgop_add global z changed changed"

  PGOP_GLOBAL=()
  PGOP_GLOBAL+=("z zzz something -")
  assertFalse "adding duplicate long option"    \
    "pgop_add global c zzz changed"

  PGOP_GLOBAL=()
  assertTrue "adding a unique option"    \
    'pgop_add global s something xxx'

  PGOP_GLOBAL=()
  assertEquals "content of a unique option"    \
    's something eHh4Cg== -' \
    "$(pgop_add global s something xxx; echo ${PGOP_GLOBAL[0]})"

  PGOP_GLOBAL=()
  assertEquals "content with an optarg"    \
    's something eHh4Cg== b3B0YXJnCg==' \
    "$(pgop_add global s something xxx optarg; echo ${PGOP_GLOBAL[0]})"
}

#function testContext() {
#  assertEquals "read the default context"    \
#    "global"                                 \
#    "$(pgop_context)"
#
#  assertEquals "context after adding"        \
#    "$(echo -e "global\nnew_context")"       \
#    "$(pgop_context new_context)"
#}
#
#function testSet() {
#  assertFalse "when doesn't exist" 'pgop_set "global" "blah" "value"'
#  assertEquals "when doesn't exist"                             \
#    "Error: the option 'blah' does not exist"                   \
#    "$(pgop_set "global" "blah" "value" 2>&1)"
#
#  assertEquals "can read the value"                             \
#    "value"                   \
#    "$(pgop_add "global" "b" "blah" "desc" "value"; pgop_set global blah)"
#}


source $(dirname $0)/shunit/src/shunit2

# vim: ft=sh
