#!/usr/bin/env bash
source $(dirname $0)/../lib/public.inc

function testDescription() {
  assertEquals "when unset"   ""              "$(pgop_description)"
  assertTrue   "setting"      "pgop_description 'is_set'"
  assertEquals "when set"     "is_set"        "$(pgop_description "is_set"; pgop_description)"
}

function testRead() {
  PGOP_GLOBAL=()
  assertFalse "a non-existant object returns false" \
    "pgop_read xyz"

  PGOP_GLOBAL=()
  PGOP_GLOBAL+=("z zzz something -")
  assertTrue "an existant object returns true"    \
    "pgop_read zzz"

  assertEquals "returns exitant object"    \
    "z zzz something -" \
    "$(pgop_read zzz)"

  PGOP_GLOBAL=()
  PGOP_GLOBAL+=("z zzz something -")
  PGOP_GLOBAL+=("y yyy something_else -")
  assertTrue "multiple objects returns true"       \
    "pgop_read"

  assertEquals "multiple objects are returned"       \
    2                                                \
    $(pgop_read | wc -l)

  assertEquals "with multiple objects should be able to return specific"     \
    "z zzz something -" \
    "$(pgop_read z)"

  assertEquals "with multiple object, return nothing when it doesn't exist"     \
    "" \
    "$(pgop_read zzzz)"

  assertFalse "with multiple object, return false when it doesn't exist"     \
    "pgop_read zzzz"

  PGOP_GLOBAL=()
  PGOP_GLOBAL+=("z: zzz: something -")
  assertTrue "when searching for an argument with a required option"    \
    "pgop_read zzz"
}

function testAdd() {
  assertEquals "without enough options"    \
    "Error: you must provide short option, long option, description and optionally an optarg too"  \
    "$(pgop_add 2>&1)"

  PGOP_GLOBAL=()
  PGOP_GLOBAL+=("z zzz something -")
  assertFalse "adding duplicate short option"    \
    "pgop_add z changed changed"

  PGOP_GLOBAL=()
  PGOP_GLOBAL+=("z zzz something -")
  assertFalse "adding duplicate long option"    \
    "pgop_add c zzz changed"

  PGOP_GLOBAL=()
  assertTrue "adding a unique option"    \
    'pgop_add s something xxx'

  PGOP_GLOBAL=()
  assertEquals "content of a unique option"    \
    's something eHh4Cg== -' \
    "$(pgop_add s something xxx; echo ${PGOP_GLOBAL[0]})"

  PGOP_GLOBAL=()
  assertEquals "content with an optarg"    \
    's something eHh4Cg== b3B0YXJnCg==' \
    "$(pgop_add s something xxx optarg; echo ${PGOP_GLOBAL[0]})"
}

function testContext() {
  unset PGOP_CONTEXT
  assertEquals "read the default context"   \
    "global"                                \
    "$(pgop_context)"

  assertEquals "context after changing"     \
    "new_context"                           \
    "$(pgop_context new_context)"
}

function testOperands() {
  assertEquals "read the default operands"   \
    ""                                 \
    "$(pgop_operands)"

  assertTrue "adding one operand"    \
    "pgop_operands one"

  PGOP_OPERANDS=()
  assertEquals "can read operands"    \
    "something"                       \
    "$(pgop_operands something; pgop_operands)"
}

function testSet() {
  PGOP_GLOBAL=()
  assertFalse "when option doesn't exist" \
    'pgop_set blah optarg'

  assertEquals "when doesn't exist"                             \
    "Error: option 'blah' does not exist"                   \
    "$(pgop_set "blah" "value" 2>&1)"

  PGOP_GLOBAL=()
  PGOP_GLOBAL+=("z zzz something -")
  assertTrue "returns true when setting an existing value"                             \
    "pgop_set zzz value"

  assertEquals "value actually gets set"                             \
    "z zzz something dGhpcyBpcyB0aGUgdmFsdWUK" \
    "$(pgop_set zzz 'this is the value'; echo ${PGOP_GLOBAL[0]})"

  PGOP_GLOBAL=()
  PGOP_GLOBAL+=("z zzz something -")
  assertEquals "value actually gets set"                             \
    "z zzz something true" \
    "$(pgop_set zzz true; echo ${PGOP_GLOBAL[0]})"

  PGOP_GLOBAL=()
  PGOP_GLOBAL+=("z zzz something true")
  assertEquals "value actually gets set"                             \
    "z zzz something -" \
    "$(pgop_set zzz false; echo ${PGOP_GLOBAL[0]})"
}

function testArgument() {
  PGOP_GLOBAL=("x xxx something -")
  assertFalse "returns false when value is '-'"                             \
    "pgop_argument global xxx"

  assertEquals "print empty string when value is '-'"                             \
    "" \
    "$(pgop_argument global xxx)"

  PGOP_GLOBAL=("x xxx something true")
  assertTrue "returns false when value is 'true'"                             \
    "pgop_argument global xxx"

  PGOP_GLOBAL=("x xxx something seOEIFJsef==")
  assertTrue "returns true when value is base64"                             \
    "pgop_argument global xxx"

  PGOP_GLOBAL=("x xxx something YWJjZAo=")
  assertEquals "prints decoded value it's set"                             \
    "abcd" \
    "$(pgop_argument global xxx)"
}

source $(dirname $0)/shunit/src/shunit2

# vim: ft=sh
