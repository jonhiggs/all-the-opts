#!/usr/bin/env bash
source $(dirname $0)/../lib/public.inc

function testDescription() {
  assertEquals "when unset"   ""              "$(pgop_description)"
  assertTrue   "setting"      "pgop_description 'is_set'"
  assertEquals "when set"     "is_set"        "$(pgop_description "is_set"; pgop_description)"
}

function testSet() {
  assertFalse "when doesn't exist" 'pgop_set "global" "blah"'
  assertEquals "when doesn't exist"                             \
    ""                                                          \
    "$(pgop_set "global" "blah")"


  assertEquals "by short option when exists"                    \
    "x xxx ZGVzYwo= -"                                          \
    "$(pgop_add global x xxx desc; pgop_set "global" "x")"

  assertEquals "by long option when exists"                     \
    "x xxx ZGVzYwo= -"                                          \
    "$(pgop_add global x xxx desc; pgop_set "global" "xxx")"
}

function testAdd() {
  assertEquals "without context"    \
      "Error: you must provide context, short option, long option, description and optionally a value too."  \
      "$(pgop_add 2>&1)"

  assertEquals "empty global context without options"    \
      ""  \
      "$(pgop_add global)"

  assertTrue "adding a global option"    \
      'pgop_add global s something "this is something"'

  assertEquals "global context with options"    \
    "n nnn aGVscCBmb3Igbgo= -"  \
    "$(pgop_add global n nnn "help for n"; pgop_add global)"

  assertEquals "adding a duplicate short option"    \
    "Error: non-unique option"             \
    "$(pgop_add global n nnn "help for n"; pgop_add global n xxx x 2>&1)"

  assertEquals "adding a duplicate long option"    \
    "Error: non-unique option"             \
    "$(pgop_add global n nnn "help for n"; pgop_add global x nnn x 2>&1)"
}

function testContext() {
  assertEquals "read the default context"    \
    "global"                                 \
    "$(pgop_context)"

  assertEquals "context after adding"        \
    "$(echo -e "global\nnew_context")"       \
    "$(pgop_context new_context)"
}

function testSet() {
  pgop_add "global" "t" "test" "description"

  assertEquals "value before setting"        \
    "global t test something -"       \
    "$(pgop_set global '--test')"

  assertEquals "value after setting"        \
    ""       \
    "$(pgop_set global '--test')"

  # when it takes an optional argument
  # when it takes a required argument
  # when it takes no argument
}


source $(dirname $0)/shunit/src/shunit2

# vim: ft=sh
