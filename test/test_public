#!/usr/bin/env bash
source $(dirname $0)/../lib/public.inc

function testDescription() {
  assertEquals "when unset"   0              $(ato_description | wc -l)
  assertTrue   "setting"      "ato_description 'is_set'"
  assertEquals "when set"     "is_set"        "$(ato_description "is_set"; ato_description)"
}

function testRead() {
  ATO_GLOBAL=()
  assertFalse "a non-existant object returns false" \
    "ato_read xyz"

  assertEquals "show usage when no option is provided" \
    "USAGE: ato_read <option>"  \
    "$(ato_read 2>&1)"

  assertEquals "a non-existant object displays an error" \
    "ERROR: option 'xyz' is invalid"  \
    "$(ato_read xyz 2>&1)"

  ATO_GLOBAL=("z zzz something -")
  assertFalse "an existant object with a false value"    \
    "ato_read zzz"

  ATO_GLOBAL=("z zzz something true")
  assertTrue "an existant object with a true value"    \
    "ato_read zzz"

  ATO_GLOBAL=("z zzz something aGVsbG8K")
  assertEquals "returns existing value"    \
    "hello" \
    "$(ato_read zzz)"
}

#function testAdd() {
#  assertEquals "without enough options"    \
#    "USAGE: ato_add <context> <short_opt> <long_opt> <desription> [option_argument]"  \
#    "$(ato_add 2>&1)"
#
#  ATO_GLOBAL=()
#  ATO_GLOBAL+=("z zzz something -")
#  assertFalse "adding duplicate short option"    \
#    "ato_add z changed changed"
#
#  ATO_GLOBAL=()
#  ATO_GLOBAL+=("z zzz something -")
#  assertFalse "adding duplicate long option"    \
#    "ato_add c zzz changed"
#
#  ATO_GLOBAL=()
#  assertTrue "adding a unique option"    \
#    'ato_add s something xxx'
#
#  ATO_GLOBAL=()
#  assertEquals "content of a unique option"    \
#    's something eHh4Cg== -' \
#    "$(ato_add s something xxx; echo ${ATO_GLOBAL[0]})"
#
#  ATO_GLOBAL=()
#  assertEquals "content with an optarg"    \
#    's something eHh4Cg== b3B0YXJnCg==' \
#    "$(ato_add s something xxx optarg; echo ${ATO_GLOBAL[0]})"
#}
#
#function testContext() {
#  unset ATO_CONTEXT
#  assertEquals "read the default context"   \
#    "global"                                \
#    "$(ato_context)"
#
#  assertEquals "don't return context after changing"     \
#    ""                                      \
#    "$(ato_context new_context)"
#}
#
#function testOperands() {
#  assertEquals "read the default operands"   \
#    ""                                 \
#    "$(ato_operands)"
#
#  assertTrue "adding one operand"    \
#    "ato_operands one"
#
#  ATO_OPERANDS=()
#  assertEquals "can read operands"    \
#    "something"                       \
#    "$(ato_operands something; ato_operands)"
#}

function testSet() {
  ATO_GLOBAL=()
  assertFalse "exit status when option doesn't exist" \
    'ato_set blah optarg'

  assertEquals "when doesn't exist"                             \
    "ERROR: option 'blah' does not exist"                   \
    "$(ato_set "blah" "value" 2>&1)"

  assertEquals "when not enough arguments"                             \
    "USAGE: ato_set <option> <option_argument>"                   \
    "$(ato_set 2>&1)"

  ATO_GLOBAL=()
  ATO_GLOBAL+=("z zzz something -")
  assertTrue "returns true when setting an existing value"                             \
    "ato_set zzz value"

  assertEquals "value actually gets set"                             \
    "z zzz something dGhpcyBpcyB0aGUgdmFsdWUK" \
    "$(ato_set zzz 'this is the value'; echo ${ATO_GLOBAL[0]})"

  ATO_GLOBAL=()
  ATO_GLOBAL+=("z zzz something -")
  assertEquals "value actually gets set"                             \
    "z zzz something true" \
    "$(ato_set zzz true; echo ${ATO_GLOBAL[0]})"

  ATO_GLOBAL=()
  ATO_GLOBAL+=("z zzz something true")
  assertEquals "value actually gets set"                             \
    "z zzz something -" \
    "$(ato_set zzz false; echo ${ATO_GLOBAL[0]})"
}

function testArgument() {
  ATO_GLOBAL=("x xxx something -")
  assertFalse "returns false when value is '-'"                             \
    "ato_argument xxx"

  assertEquals "print empty string when value is '-'"                             \
    "" \
    "$(ato_argument xxx)"

  ATO_GLOBAL=("x xxx something true")
  assertTrue "returns false when value is 'true'"                             \
    "ato_argument xxx"

  ATO_GLOBAL=("x xxx something seOEIFJsef==")
  assertTrue "returns true when value is base64"                             \
    "ato_argument xxx"

  ATO_GLOBAL=("x xxx something YWJjZAo=")
  assertEquals "prints decoded value it's set"                             \
    "abcd" \
    "$(ato_argument xxx)"
}

function testOptions() {
  ATO_GLOBAL=("x xxx something -")
  assertEquals "xxx"                      \
    "$(ato_options)"
}

source $(dirname $0)/shunit/src/shunit2

# vim: ft=sh
