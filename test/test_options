#!/usr/bin/env bash
source $(dirname $0)/../lib/options.inc

function testOptionPosition() {
  ATO_GLOBAL=()
  ATO_GLOBAL+=("1 one xxx xxx")
  ATO_GLOBAL+=("2 two yyy yyy")

  assertTrue "known option" \
    "__ato_option_position global one"

  assertFalse "unknown option" \
    "__ato_option_position global unknown"

  assertEquals "position by short" \
    "0" \
    "$(__ato_option_position global 1)"

  assertEquals "position by long" \
    "0" \
    "$(__ato_option_position global one)"

  ATO_GLOBAL=()
  ATO_GLOBAL+=("1: one: xxx xxx")
  ATO_GLOBAL+=("2:: two:: yyy yyy")

  assertTrue "known option with argument" \
    "__ato_option_position global one"

  assertTrue "known option with optional argument" \
    "__ato_option_position global two"

}

function testOptionRead() {
  ATO_GLOBAL=()
  ATO_GLOBAL+=("1 one xxx xxx")
  ATO_GLOBAL+=("2 two yyy yyy")

  assertEquals "without a number in the position section" \
    "USAGE: __ato_option_read <context> [position]" \
    "$(__ato_option_read global abc 2>&1)"

  assertEquals "with no position option return both options" \
    2 \
    $(__ato_option_read global | wc -l)

  assertTrue "existant position should return true" \
    "__ato_option_read global 0"

  assertFalse "non-existant position should return false" \
    "__ato_option_read global 999"

  assertEquals "can read existing option" \
    "1 one xxx xxx" \
    "$(__ato_option_read global 0)"

  assertFalse "when option doesn't exist" \
    "__ato_option_read global 99"

  ATO_GLOBAL=("1: one: xxx xxx")
  assertEquals "can read existing option with required argument" \
    "1: one: xxx xxx" \
    "$(__ato_option_read global 0)"
}

function testOptionWrite() {
  ATO_GLOBAL=()

  assertEquals "can write to array"            \
    "a b c d"                                 \
    "$(__ato_option_write global 'a b c d' && echo ${ATO_GLOBAL[0]})"

  ATO_GLOBAL=("x y z a")
  ATO_GLOBAL+=("a b c d")
  assertEquals "can edit array"            \
    "a a a a"                                 \
    "$(
      __ato_option_write global 'a b c d';
      __ato_option_write global 'a a a a' 1;
      echo ${ATO_GLOBAL[1]}
    )"

  assertTrue "when writing valid data" \
    "__ato_option_write global '1 2 3 4'"

  assertFalse "when writing invalid data" \
    "__ato_option_write global"
}

function testOptionReadOptarg() {
  assertTrue "when value is true" \
    "__ato_option_read_optarg 'a aaa x true'"

  assertFalse "when value is -" \
    "__ato_option_read_optarg 'a aaa x -'"

  assertEquals "when value is base64 encoded" \
    "hello"   \
    "$(__ato_option_read_optarg 'a aaa x aGVsbG8K')"
}

source $(dirname $0)/shunit/src/shunit2

# vim: ft=sh
